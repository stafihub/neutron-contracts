{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryRegisteredQueryResponse",
  "type": "object",
  "required": [
    "registered_query"
  ],
  "properties": {
    "registered_query": {
      "description": "*registered_query** is a registered query",
      "allOf": [
        {
          "$ref": "#/definitions/RegisteredQuery"
        }
      ]
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Height": {
      "type": "object",
      "properties": {
        "revision_height": {
          "description": "*height** is a height of remote chain",
          "default": 0,
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "revision_number": {
          "description": "the revision that the client is currently on",
          "default": 0,
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "KVKey": {
      "description": "Describes a KV key for which you want to get value from the storage on remote chain",
      "type": "object",
      "required": [
        "key",
        "path"
      ],
      "properties": {
        "key": {
          "description": "*key** is a key you want to read from the storage",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "path": {
          "description": "*path** is a path to the storage (storage prefix) where you want to read value by key (usually name of cosmos-packages module: 'staking', 'bank', etc.)",
          "type": "string"
        }
      }
    },
    "QueryType": {
      "description": "Describes possible interchain query types",
      "oneOf": [
        {
          "description": "*kv** is an interchain query type to query KV values from remote chain",
          "type": "string",
          "enum": [
            "kv"
          ]
        },
        {
          "description": "*tx** is an interchain query type to query transactions from remote chain",
          "type": "string",
          "enum": [
            "tx"
          ]
        }
      ]
    },
    "RegisteredQuery": {
      "type": "object",
      "required": [
        "connection_id",
        "id",
        "keys",
        "owner",
        "query_type",
        "transactions_filter",
        "update_period"
      ],
      "properties": {
        "connection_id": {
          "description": "The IBC connection ID for getting ConsensusState to verify proofs.",
          "type": "string"
        },
        "deposit": {
          "description": "Amount of coins deposited for the query.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "id": {
          "description": "The unique id of the registered query.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "keys": {
          "description": "The KV-storage keys for which we want to get values from remote chain",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KVKey"
          }
        },
        "last_submitted_result_local_height": {
          "description": "The local chain last block height when the query result was updated.",
          "default": 0,
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "last_submitted_result_remote_height": {
          "description": "The remote chain last block height when the query result was updated.",
          "default": {
            "revision_height": 0,
            "revision_number": 0
          },
          "allOf": [
            {
              "$ref": "#/definitions/Height"
            }
          ]
        },
        "owner": {
          "description": "The address that registered the query.",
          "type": "string"
        },
        "query_type": {
          "description": "The query type identifier (i.e. 'kv' or 'tx' for now)",
          "allOf": [
            {
              "$ref": "#/definitions/QueryType"
            }
          ]
        },
        "registered_at_height": {
          "description": "The local chain height when the query was registered.",
          "default": 0,
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "submit_timeout": {
          "description": "Timeout before query becomes available for everybody to remove.",
          "default": 0,
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "transactions_filter": {
          "description": "The filter for transaction search ICQ",
          "type": "string"
        },
        "update_period": {
          "description": "Parameter that defines how often the query must be updated.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
