{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "register_pool"
      ],
      "properties": {
        "register_pool": {
          "type": "object",
          "required": [
            "connection_id",
            "interchain_account_id",
            "register_fee"
          ],
          "properties": {
            "connection_id": {
              "type": "string"
            },
            "interchain_account_id": {
              "type": "string"
            },
            "register_fee": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "init_pool"
      ],
      "properties": {
        "init_pool": {
          "$ref": "#/definitions/InitPoolParams"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "config_pool"
      ],
      "properties": {
        "config_pool": {
          "$ref": "#/definitions/ConfigPoolParams"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "register_balance_query"
      ],
      "properties": {
        "register_balance_query": {
          "type": "object",
          "required": [
            "addr",
            "connection_id",
            "denom",
            "update_period"
          ],
          "properties": {
            "addr": {
              "type": "string"
            },
            "connection_id": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            },
            "update_period": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "register_delegator_delegations_query"
      ],
      "properties": {
        "register_delegator_delegations_query": {
          "type": "object",
          "required": [
            "connection_id",
            "delegator",
            "update_period",
            "validators"
          ],
          "properties": {
            "connection_id": {
              "type": "string"
            },
            "delegator": {
              "type": "string"
            },
            "update_period": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "validators": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "stake"
      ],
      "properties": {
        "stake": {
          "type": "object",
          "required": [
            "neutron_address",
            "pool_addr"
          ],
          "properties": {
            "neutron_address": {
              "type": "string"
            },
            "pool_addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "unstake"
      ],
      "properties": {
        "unstake": {
          "type": "object",
          "required": [
            "amount",
            "pool_addr"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "pool_addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "interchain_account_id",
            "pool_addr",
            "receiver"
          ],
          "properties": {
            "interchain_account_id": {
              "type": "string"
            },
            "pool_addr": {
              "type": "string"
            },
            "receiver": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pool_rm_validator"
      ],
      "properties": {
        "pool_rm_validator": {
          "type": "object",
          "required": [
            "pool_addr",
            "validator_addrs"
          ],
          "properties": {
            "pool_addr": {
              "type": "string"
            },
            "validator_addrs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pool_add_validator"
      ],
      "properties": {
        "pool_add_validator": {
          "type": "object",
          "required": [
            "pool_addr",
            "validator_addrs"
          ],
          "properties": {
            "pool_addr": {
              "type": "string"
            },
            "validator_addrs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "era_update"
      ],
      "properties": {
        "era_update": {
          "type": "object",
          "required": [
            "channel",
            "pool_addr"
          ],
          "properties": {
            "channel": {
              "type": "string"
            },
            "pool_addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "era_bond"
      ],
      "properties": {
        "era_bond": {
          "type": "object",
          "required": [
            "pool_addr"
          ],
          "properties": {
            "pool_addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "era_collect_withdraw"
      ],
      "properties": {
        "era_collect_withdraw": {
          "type": "object",
          "required": [
            "pool_addr"
          ],
          "properties": {
            "pool_addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "era_active"
      ],
      "properties": {
        "era_active": {
          "type": "object",
          "required": [
            "pool_addr"
          ],
          "properties": {
            "pool_addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "stake_l_s_m"
      ],
      "properties": {
        "stake_l_s_m": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "ConfigPoolParams": {
      "type": "object",
      "required": [
        "era_seconds",
        "minimal_stake",
        "next_unstake_index",
        "offset",
        "pool_addr",
        "protocol_fee_receiver",
        "rtoken",
        "unbond_commission",
        "unbonding_period",
        "unstake_times_limit"
      ],
      "properties": {
        "era_seconds": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "minimal_stake": {
          "$ref": "#/definitions/Uint128"
        },
        "next_unstake_index": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "offset": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "pool_addr": {
          "type": "string"
        },
        "protocol_fee_receiver": {
          "type": "string"
        },
        "rtoken": {
          "type": "string"
        },
        "unbond_commission": {
          "$ref": "#/definitions/Uint128"
        },
        "unbonding_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "unstake_times_limit": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "InitPoolParams": {
      "type": "object",
      "required": [
        "active",
        "bond",
        "era",
        "ibc_denom",
        "interchain_account_id",
        "rate",
        "remote_denom",
        "unbond",
        "validator_addrs"
      ],
      "properties": {
        "active": {
          "$ref": "#/definitions/Uint128"
        },
        "bond": {
          "$ref": "#/definitions/Uint128"
        },
        "era": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "ibc_denom": {
          "type": "string"
        },
        "interchain_account_id": {
          "type": "string"
        },
        "rate": {
          "$ref": "#/definitions/Uint128"
        },
        "remote_denom": {
          "type": "string"
        },
        "unbond": {
          "$ref": "#/definitions/Uint128"
        },
        "validator_addrs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
