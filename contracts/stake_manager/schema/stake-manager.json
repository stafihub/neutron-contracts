{
  "contract_name": "stake-manager",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object"
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "register_pool"
        ],
        "properties": {
          "register_pool": {
            "type": "object",
            "required": [
              "connection_id",
              "interchain_account_id",
              "register_fee"
            ],
            "properties": {
              "connection_id": {
                "type": "string"
              },
              "interchain_account_id": {
                "type": "string"
              },
              "register_fee": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "init_pool"
        ],
        "properties": {
          "init_pool": {
            "$ref": "#/definitions/InitPoolParams"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config_pool"
        ],
        "properties": {
          "config_pool": {
            "$ref": "#/definitions/ConfigPoolParams"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config_stack"
        ],
        "properties": {
          "config_stack": {
            "$ref": "#/definitions/ConfigStackParams"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "open_channel"
        ],
        "properties": {
          "open_channel": {
            "type": "object",
            "required": [
              "closed_channel_id",
              "pool_addr",
              "register_fee"
            ],
            "properties": {
              "closed_channel_id": {
                "type": "string"
              },
              "pool_addr": {
                "type": "string"
              },
              "register_fee": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "redeem_token_for_share"
        ],
        "properties": {
          "redeem_token_for_share": {
            "type": "object",
            "required": [
              "pool_addr",
              "tokens"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              },
              "tokens": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "stake"
        ],
        "properties": {
          "stake": {
            "type": "object",
            "required": [
              "neutron_address",
              "pool_addr"
            ],
            "properties": {
              "neutron_address": {
                "type": "string"
              },
              "pool_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unstake"
        ],
        "properties": {
          "unstake": {
            "type": "object",
            "required": [
              "amount",
              "pool_addr"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "pool_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "required": [
              "pool_addr",
              "receiver",
              "unstake_index_list"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              },
              "receiver": {
                "$ref": "#/definitions/Addr"
              },
              "unstake_index_list": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pool_rm_validator"
        ],
        "properties": {
          "pool_rm_validator": {
            "type": "object",
            "required": [
              "pool_addr",
              "validator_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              },
              "validator_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pool_add_validator"
        ],
        "properties": {
          "pool_add_validator": {
            "type": "object",
            "required": [
              "pool_addr",
              "validator_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              },
              "validator_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pool_update_validator"
        ],
        "properties": {
          "pool_update_validator": {
            "type": "object",
            "required": [
              "new_validator",
              "old_validator",
              "pool_addr"
            ],
            "properties": {
              "new_validator": {
                "type": "string"
              },
              "old_validator": {
                "type": "string"
              },
              "pool_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pool_update_query"
        ],
        "properties": {
          "pool_update_query": {
            "type": "object",
            "required": [
              "pool_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "era_update"
        ],
        "properties": {
          "era_update": {
            "type": "object",
            "required": [
              "pool_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "era_bond"
        ],
        "properties": {
          "era_bond": {
            "type": "object",
            "required": [
              "pool_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "era_collect_withdraw"
        ],
        "properties": {
          "era_collect_withdraw": {
            "type": "object",
            "required": [
              "pool_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "era_restake"
        ],
        "properties": {
          "era_restake": {
            "type": "object",
            "required": [
              "pool_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "era_active"
        ],
        "properties": {
          "era_active": {
            "type": "object",
            "required": [
              "pool_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "stake_lsm"
        ],
        "properties": {
          "stake_lsm": {
            "type": "object",
            "required": [
              "neutron_address",
              "pool_addr"
            ],
            "properties": {
              "neutron_address": {
                "type": "string"
              },
              "pool_addr": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "ConfigPoolParams": {
        "type": "object",
        "required": [
          "pool_addr"
        ],
        "properties": {
          "era_seconds": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "lsm_pending_limit": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "lsm_support": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "minimal_stake": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "new_admin": {
            "anyOf": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "type": "null"
              }
            ]
          },
          "next_unstake_index": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "offset": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "paused": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "platform_fee_commission": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "platform_fee_receiver": {
            "type": [
              "string",
              "null"
            ]
          },
          "pool_addr": {
            "type": "string"
          },
          "rate_change_limit": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "unbond_commission": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "unbonding_period": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "unstake_times_limit": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "ConfigStackParams": {
        "type": "object",
        "properties": {
          "add_operator": {
            "anyOf": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "type": "null"
              }
            ]
          },
          "lsd_token_code_id": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "new_admin": {
            "anyOf": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "type": "null"
              }
            ]
          },
          "rm_operator": {
            "anyOf": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "type": "null"
              }
            ]
          },
          "stack_fee_commission": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "stack_fee_receiver": {
            "anyOf": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "type": "null"
              }
            ]
          },
          "total_stack_fee": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "InitPoolParams": {
        "type": "object",
        "required": [
          "active",
          "bond",
          "channel_id_of_ibc_denom",
          "era",
          "ibc_denom",
          "interchain_account_id",
          "lsd_token_name",
          "lsd_token_symbol",
          "platform_fee_receiver",
          "rate",
          "remote_denom",
          "share_tokens",
          "total_platform_fee",
          "unbond",
          "validator_addrs"
        ],
        "properties": {
          "active": {
            "$ref": "#/definitions/Uint128"
          },
          "bond": {
            "$ref": "#/definitions/Uint128"
          },
          "channel_id_of_ibc_denom": {
            "type": "string"
          },
          "era": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "era_seconds": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "ibc_denom": {
            "type": "string"
          },
          "interchain_account_id": {
            "type": "string"
          },
          "lsd_code_id": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "lsd_token_name": {
            "type": "string"
          },
          "lsd_token_symbol": {
            "type": "string"
          },
          "offset": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "platform_fee_receiver": {
            "type": "string"
          },
          "rate": {
            "$ref": "#/definitions/Uint128"
          },
          "remote_denom": {
            "type": "string"
          },
          "share_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "total_lsd_token_amount": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "total_platform_fee": {
            "$ref": "#/definitions/Uint128"
          },
          "unbond": {
            "$ref": "#/definitions/Uint128"
          },
          "validator_addrs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_registered_query"
        ],
        "properties": {
          "get_registered_query": {
            "type": "object",
            "required": [
              "query_id"
            ],
            "properties": {
              "query_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "balance"
        ],
        "properties": {
          "balance": {
            "type": "object",
            "required": [
              "ica_addr"
            ],
            "properties": {
              "ica_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "delegations"
        ],
        "properties": {
          "delegations": {
            "type": "object",
            "required": [
              "pool_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pool_info"
        ],
        "properties": {
          "pool_info": {
            "type": "object",
            "required": [
              "pool_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "stack_info"
        ],
        "properties": {
          "stack_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "era_snapshot"
        ],
        "properties": {
          "era_snapshot": {
            "type": "object",
            "required": [
              "pool_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "this query goes to neutron and get stored ICA with a specific query",
        "type": "object",
        "required": [
          "interchain_account_address"
        ],
        "properties": {
          "interchain_account_address": {
            "type": "object",
            "required": [
              "connection_id",
              "interchain_account_id"
            ],
            "properties": {
              "connection_id": {
                "type": "string"
              },
              "interchain_account_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "interchain_account_address_from_contract"
        ],
        "properties": {
          "interchain_account_address_from_contract": {
            "type": "object",
            "required": [
              "interchain_account_id"
            ],
            "properties": {
              "interchain_account_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "acknowledgement_result"
        ],
        "properties": {
          "acknowledgement_result": {
            "type": "object",
            "required": [
              "interchain_account_id",
              "sequence_id"
            ],
            "properties": {
              "interchain_account_id": {
                "type": "string"
              },
              "sequence_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "user_unstake"
        ],
        "properties": {
          "user_unstake": {
            "type": "object",
            "required": [
              "pool_addr",
              "user_neutron_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              },
              "user_neutron_addr": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "user_unstake_index"
        ],
        "properties": {
          "user_unstake_index": {
            "type": "object",
            "required": [
              "pool_addr",
              "user_neutron_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              },
              "user_neutron_addr": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "errors_queue"
        ],
        "properties": {
          "errors_queue": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "acknowledgement_result": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "uint64",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BalanceResponse",
      "type": "object",
      "required": [
        "balances",
        "last_submitted_local_height"
      ],
      "properties": {
        "balances": {
          "$ref": "#/definitions/Balances"
        },
        "last_submitted_local_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "definitions": {
        "Balances": {
          "description": "A structure that can be reconstructed from **StorageValues**'s for the **Balance Interchain Query**. Contains coins that are held by some account on remote chain.",
          "type": "object",
          "required": [
            "coins"
          ],
          "properties": {
            "coins": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          }
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "delegations": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DelegatorDelegationsResponse",
      "type": "object",
      "required": [
        "delegations",
        "last_submitted_local_height"
      ],
      "properties": {
        "delegations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Delegation"
          }
        },
        "last_submitted_local_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Delegation": {
          "description": "Delegation is basic (cheap to query) data about a delegation.\n\nInstances are created in the querier.",
          "type": "object",
          "required": [
            "amount",
            "delegator",
            "validator"
          ],
          "properties": {
            "amount": {
              "description": "How much we have locked in the delegation",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "delegator": {
              "$ref": "#/definitions/Addr"
            },
            "validator": {
              "description": "A validator address (e.g. cosmosvaloper1...)",
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "era_snapshot": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EraSnapshot",
      "type": "object",
      "required": [
        "active",
        "bond",
        "bond_height",
        "era",
        "restake_amount",
        "unbond"
      ],
      "properties": {
        "active": {
          "$ref": "#/definitions/Uint128"
        },
        "bond": {
          "$ref": "#/definitions/Uint128"
        },
        "bond_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "era": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "restake_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "unbond": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "errors_queue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Tuple_of_Array_of_uint8_and_String",
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          {
            "type": "string"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    },
    "get_registered_query": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryRegisteredQueryResponse",
      "type": "object",
      "required": [
        "registered_query"
      ],
      "properties": {
        "registered_query": {
          "description": "*registered_query** is a registered query",
          "allOf": [
            {
              "$ref": "#/definitions/RegisteredQuery"
            }
          ]
        }
      },
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Height": {
          "type": "object",
          "properties": {
            "revision_height": {
              "description": "*height** is a height of remote chain",
              "default": 0,
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "revision_number": {
              "description": "the revision that the client is currently on",
              "default": 0,
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "KVKey": {
          "description": "Describes a KV key for which you want to get value from the storage on remote chain",
          "type": "object",
          "required": [
            "key",
            "path"
          ],
          "properties": {
            "key": {
              "description": "*key** is a key you want to read from the storage",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "path": {
              "description": "*path** is a path to the storage (storage prefix) where you want to read value by key (usually name of cosmos-packages module: 'staking', 'bank', etc.)",
              "type": "string"
            }
          }
        },
        "QueryType": {
          "description": "Describes possible interchain query types",
          "oneOf": [
            {
              "description": "*kv** is an interchain query type to query KV values from remote chain",
              "type": "string",
              "enum": [
                "kv"
              ]
            },
            {
              "description": "*tx** is an interchain query type to query transactions from remote chain",
              "type": "string",
              "enum": [
                "tx"
              ]
            }
          ]
        },
        "RegisteredQuery": {
          "type": "object",
          "required": [
            "connection_id",
            "id",
            "keys",
            "owner",
            "query_type",
            "transactions_filter",
            "update_period"
          ],
          "properties": {
            "connection_id": {
              "description": "The IBC connection ID for getting ConsensusState to verify proofs.",
              "type": "string"
            },
            "deposit": {
              "description": "Amount of coins deposited for the query.",
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "id": {
              "description": "The unique id of the registered query.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "keys": {
              "description": "The KV-storage keys for which we want to get values from remote chain",
              "type": "array",
              "items": {
                "$ref": "#/definitions/KVKey"
              }
            },
            "last_submitted_result_local_height": {
              "description": "The local chain last block height when the query result was updated.",
              "default": 0,
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "last_submitted_result_remote_height": {
              "description": "The remote chain last block height when the query result was updated.",
              "default": {
                "revision_height": 0,
                "revision_number": 0
              },
              "allOf": [
                {
                  "$ref": "#/definitions/Height"
                }
              ]
            },
            "owner": {
              "description": "The address that registered the query.",
              "type": "string"
            },
            "query_type": {
              "description": "The query type identifier (i.e. 'kv' or 'tx' for now)",
              "allOf": [
                {
                  "$ref": "#/definitions/QueryType"
                }
              ]
            },
            "registered_at_height": {
              "description": "The local chain height when the query was registered.",
              "default": 0,
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "submit_timeout": {
              "description": "Timeout before query becomes available for everybody to remove.",
              "default": 0,
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "transactions_filter": {
              "description": "The filter for transaction search ICQ",
              "type": "string"
            },
            "update_period": {
              "description": "Parameter that defines how often the query must be updated.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "interchain_account_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryInterchainAccountAddressResponse",
      "type": "object",
      "required": [
        "interchain_account_address"
      ],
      "properties": {
        "interchain_account_address": {
          "description": "*interchain_account_address** is a interchain account address on the remote chain",
          "type": "string"
        }
      }
    },
    "interchain_account_address_from_contract": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Tuple_of_IcaInfo_and_IcaInfo_and_Addr",
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/IcaInfo"
        },
        {
          "$ref": "#/definitions/IcaInfo"
        },
        {
          "$ref": "#/definitions/Addr"
        }
      ],
      "maxItems": 3,
      "minItems": 3,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "IcaInfo": {
          "type": "object",
          "required": [
            "ctrl_channel_id",
            "ctrl_connection_id",
            "ctrl_port_id",
            "host_channel_id",
            "host_connection_id",
            "ica_addr"
          ],
          "properties": {
            "ctrl_channel_id": {
              "type": "string"
            },
            "ctrl_connection_id": {
              "type": "string"
            },
            "ctrl_port_id": {
              "type": "string"
            },
            "host_channel_id": {
              "type": "string"
            },
            "host_connection_id": {
              "type": "string"
            },
            "ica_addr": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "pool_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PoolInfo",
      "type": "object",
      "required": [
        "active",
        "admin",
        "bond",
        "channel_id_of_ibc_denom",
        "era",
        "era_process_status",
        "era_seconds",
        "era_snapshot",
        "ibc_denom",
        "ica_id",
        "lsd_token",
        "lsm_pending_limit",
        "lsm_support",
        "minimal_stake",
        "next_unstake_index",
        "offset",
        "paused",
        "platform_fee_commission",
        "platform_fee_receiver",
        "rate",
        "rate_change_limit",
        "redeemming_share_token_denom",
        "remote_denom",
        "share_tokens",
        "total_lsd_token_amount",
        "total_platform_fee",
        "unbond",
        "unbond_commission",
        "unbonding_period",
        "unstake_times_limit",
        "validator_addrs",
        "validator_update_status"
      ],
      "properties": {
        "active": {
          "$ref": "#/definitions/Uint128"
        },
        "admin": {
          "$ref": "#/definitions/Addr"
        },
        "bond": {
          "$ref": "#/definitions/Uint128"
        },
        "channel_id_of_ibc_denom": {
          "type": "string"
        },
        "era": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "era_process_status": {
          "$ref": "#/definitions/EraProcessStatus"
        },
        "era_seconds": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "era_snapshot": {
          "$ref": "#/definitions/EraSnapshot"
        },
        "ibc_denom": {
          "type": "string"
        },
        "ica_id": {
          "type": "string"
        },
        "lsd_token": {
          "$ref": "#/definitions/Addr"
        },
        "lsm_pending_limit": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lsm_support": {
          "type": "boolean"
        },
        "minimal_stake": {
          "$ref": "#/definitions/Uint128"
        },
        "next_unstake_index": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "offset": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "paused": {
          "type": "boolean"
        },
        "platform_fee_commission": {
          "$ref": "#/definitions/Uint128"
        },
        "platform_fee_receiver": {
          "$ref": "#/definitions/Addr"
        },
        "rate": {
          "$ref": "#/definitions/Uint128"
        },
        "rate_change_limit": {
          "$ref": "#/definitions/Uint128"
        },
        "redeemming_share_token_denom": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "remote_denom": {
          "type": "string"
        },
        "share_tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "total_lsd_token_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "total_platform_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "unbond": {
          "$ref": "#/definitions/Uint128"
        },
        "unbond_commission": {
          "$ref": "#/definitions/Uint128"
        },
        "unbonding_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "unstake_times_limit": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "validator_addrs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validator_update_status": {
          "$ref": "#/definitions/ValidatorUpdateStatus"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "EraProcessStatus": {
          "type": "string",
          "enum": [
            "era_update_started",
            "era_update_ended",
            "bond_started",
            "bond_ended",
            "withdraw_started",
            "withdraw_ended",
            "restake_started",
            "restake_ended",
            "active_ended"
          ]
        },
        "EraSnapshot": {
          "type": "object",
          "required": [
            "active",
            "bond",
            "bond_height",
            "era",
            "restake_amount",
            "unbond"
          ],
          "properties": {
            "active": {
              "$ref": "#/definitions/Uint128"
            },
            "bond": {
              "$ref": "#/definitions/Uint128"
            },
            "bond_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "era": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "restake_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "unbond": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "ValidatorUpdateStatus": {
          "type": "string",
          "enum": [
            "start",
            "wait_query_update",
            "end"
          ]
        }
      }
    },
    "stack_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Stack",
      "type": "object",
      "required": [
        "admin",
        "lsd_token_code_id",
        "operators",
        "pools",
        "stack_fee_commission",
        "stack_fee_receiver",
        "total_stack_fee"
      ],
      "properties": {
        "admin": {
          "$ref": "#/definitions/Addr"
        },
        "lsd_token_code_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "operators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Addr"
          }
        },
        "pools": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stack_fee_commission": {
          "$ref": "#/definitions/Uint128"
        },
        "stack_fee_receiver": {
          "$ref": "#/definitions/Addr"
        },
        "total_stack_fee": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "user_unstake": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_UnstakeInfo",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UnstakeInfo"
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UnstakeInfo": {
          "type": "object",
          "required": [
            "amount",
            "era",
            "pool_addr",
            "status",
            "unstaker"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "era": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "pool_addr": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/WithdrawStatus"
            },
            "unstaker": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "WithdrawStatus": {
          "type": "string",
          "enum": [
            "default",
            "pending"
          ]
        }
      }
    },
    "user_unstake_index": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_String",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  }
}
